/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by the original author
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

type          interfaceCompositionPhaseChangeTwoPhaseSystem;
//type          basicTwoPhaseSystem;

phases (air water);

LTS
{
    maxCo               0.5;
    maxAlphaCo          5;

    rDeltaTSmoothingCoeff 0.05;
    rDeltaTDampingCoeff 0.5;
    nAlphaSpreadIter    0;
    nAlphaSweepIter     0;
    maxDeltaT           1;
}

air
{
    type            reactingPhaseModel;
    diameterModel   isothermal;
    isothermalCoeffs
    {
        d0              5e-4;
        p0              1e5;
    }

    residualAlpha   1e-6;
}

water
{
    type            purePhaseModel;
    diameterModel constant;
    constantCoeffs
    {
        d               5e-4;
    }

    residualAlpha   1e-6;
}

blending
{
    default
    {
        type            linear;
        minFullyContinuousAlpha.air 0.7;
        minPartlyContinuousAlpha.air 0.3;
        minFullyContinuousAlpha.water 0.7;
        minPartlyContinuousAlpha.water 0.3;
    }

    heatTransfer
    {
        type            linear;
        minFullyContinuousAlpha.air 1;
        minPartlyContinuousAlpha.air 0;
        minFullyContinuousAlpha.water 1;
        minPartlyContinuousAlpha.water 0;
    }

    massTransfer
    {
        $heatTransfer;
    }
}

surfaceTension
(
    (air and water)
    {
        type            constant;
        sigma           0.07;
    }
);

aspectRatio
(
    (air in water)
    {
        type            constant;
        E0              1.0;
    }

    (water in air)
    {
        type            constant;
        E0              1.0;
    }
);

drag
(
    (air in water)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (water in air)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }
);

virtualMass
(
//     (air in water)
//     {
//         type            constantCoefficient;
//         Cvm             0.5;
//     }
// 
//     (water in air)
//     {
//         type            constantCoefficient;
//         Cvm             0.5;
//     }
);

interfaceComposition
(
    (air in water)
    {
        type saturated;
        species ( H2O );
        Le 1.0;
        saturationPressure
        {
            type ArdenBuck;
        }
    }

//     (water in air)
//     {
//         type Henry;
//         species ( H2O );
//         k ( 1.492e-2 );
//         Le 1.0;
//     }
);

heatTransfer
(
    (air in water)
    {
        type spherical;
        residualAlpha 1e-4;
    }

    (water in air)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }
);


heatTransfer.air
(
    (air in water)
    {
        type spherical;
        residualAlpha 1e-4;
    }

    (water in air)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }
);

heatTransfer.water
(
    (air in water)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }

    (water in air)
    {
        type spherical;
        residualAlpha 1e-4;
    }
);

massTransfer.air
(
    (air in water)
    {
        type spherical;
        Le 1.0;
    }

    (water in air)
    {
        type Frossling;
        Le 1.0;
    }
);

massTransfer.water
(
    (air in water)
    {
        type Frossling;
        Le 1.0;
    }

    (water in air)
    {
        type spherical;
        Le 1.0;
    }
);

phaseTransfer
(
);

lift
(
);

wallLubrication
(
);

turbulentDispersion
(
);

// Minimum allowable pressure
pMin            10000;

// ************************************************************************* //
